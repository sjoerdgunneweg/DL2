Bootstrap: docker
From: nvidia/cuda:11.7.1-cudnn8-devel-ubuntu22.04

%environment
    export TZ=Europe/Amsterdam
    export DEBIAN_FRONTEND=noninteractive
    export TMPDIR=/var/tmp/
    export COPPELIASIM_ROOT=/opt/coppeliaSim
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$COPPELIASIM_ROOT
    export LIBGL_ALWAYS_SOFTWARE=1
    export PYTHONPATH=/root/install/RVT:\
/root/install/RVT/rvt/libs/PyRep:\
/root/install/RVT/rvt/libs/RLBench:\
/root/install/RVT/rvt/libs/YARR:\
/root/install/RVT/rvt/libs/peract_colab:\
/root/install/RVT/rvt/libs/point-renderer:\
$PYTHONPATH
    export FORCE_CUDA=1
    export TORCH_CUDA_ARCH_LIST="7.5;8.0;8.6"
    export QT_QPA_PLATFORM_PLUGIN_PATH=$COPPELIASIM_ROOT

%setup
    # Commands to be executed on host system before building container

%files
    # Files to be copied from host to container

%post
    # Set timezone
    ln -snf /usr/share/zoneinfo/Europe/Amsterdam /etc/localtime
    echo "Europe/Amsterdam" > /etc/timezone
    
    # Set up temporary directories
    chmod 1777 /tmp
    mkdir -p /var/tmp
    chmod 1777 /var/tmp
    
    # Install essential system dependencies
    apt-get update
    apt-get install -y --no-install-recommends software-properties-common curl wget unzip ca-certificates gnupg
    add-apt-repository ppa:deadsnakes/ppa -y
    apt-get update
    
    # Install dependencies for headless operation
    apt-get install -y xvfb xserver-xorg xinit nvidia-settings kmod
    apt-get install -y libglu1-mesa-dev mesa-utils xterm xauth x11-xkb-utils xfonts-base xkb-data libxtst6 libxv1
    apt-get install -y libxkbcommon-x11-0
    
    # Install development tools and Python
    apt-get install -y --no-install-recommends software-properties-common build-essential cmake git curl wget unzip \
    ca-certificates gnupg python3.8 python3.8-dev python3.8-venv python3-pip
    
    # Set Python 3.8 as default
    ln -sf /usr/bin/python3.8 /usr/bin/python
    ln -sf /usr/bin/pip3 /usr/bin/pip
    
    # Set up Python environment
    python -m pip install --upgrade "pip<24.1" setuptools
    
    # Download and install CoppeliaSim
    cd /tmp
    wget -O coppelia_player.tar.xz https://downloads.coppeliarobotics.com/V4_1_0/CoppeliaSim_Player_V4_1_0_Ubuntu20_04.tar.xz
    mkdir -p /opt/coppeliaSim
    tar -xJf coppelia_player.tar.xz -C /opt/coppeliaSim --strip-components=1
    chmod +x /opt/coppeliaSim/coppeliaSim.sh
    rm coppelia_player.tar.xz

    #  Set CoppeliaSim environment variables
    export COPPELIASIM_ROOT=/opt/coppeliaSim
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$COPPELIASIM_ROOT
    export QT_QPA_PLATFORM_PLUGIN_PATH=$COPPELIASIM_ROOT
    
    # Clone RVT repo with submodules
    git clone --recurse-submodules https://github.com/NVlabs/RVT.git /root/install/RVT
    cd /root/install/RVT
    git submodule update --init
    
    # Install PyTorch with CUDA support
    python -m pip install torch==1.13.1+cu117 torchvision==0.14.1+cu117 torchaudio==0.13.1 \
    --extra-index-url https://download.pytorch.org/whl/cu117
    
    # Install additional Python packages
    python -m pip install yacs omegaconf hydra-core pandas PyYAML
    
    # Install PyTorch3D dependencies and package
    python -m pip install iopath fvcore
    pip install --no-index --no-cache-dir pytorch3d \
    -f https://dl.fbaipublicfiles.com/pytorch3d/packaging/wheels/py38_cu117_pyt1131/download.html
    
    # Install RVT and its components
    cd /root/install/RVT
    python -m pip install -e '.[xformers]' || pip install -e .

    # CUDA installment
    export FORCE_CUDA=1
    export TORCH_CUDA_ARCH_LIST="7.0;7.5;8.0;8.6"
    
    # Install required libraries
    python -m pip install -e rvt/libs/PyRep
    python -m pip install -e rvt/libs/RLBench
    python -m pip install -e rvt/libs/YARR
    python -m pip install -e rvt/libs/peract_colab
    python -m pip install -e rvt/libs/point-renderer
    
    # Replace OpenCV with headless version
    pip uninstall -y opencv-python
    pip install opencv-python-headless
    
    # Run sanity check
    python -c "print('âœ… RVT2 environment successfully built.')"
    
    # Clean up
    apt-get clean
    rm -rf /var/lib/apt/lists/*

%runscript
    exec /bin/bash "$@"

%startscript
    exec /bin/bash "$@"

%test
    python -c "print('RVT2 singularity container test passed')"

%labels
    Author "Converted from Dockerfile"
    Version v1.0
    Description "Singularity container for RVT2 with CUDA support"

%help
    This is a Singularity container for RVT2 (Robotic Vision Transformer).
    It includes CUDA 11.7.1, PyTorch 1.13.1, and CoppeliaSim.
    
    Usage:
    - To run a shell in the container: singularity shell rvt.sif
    - To execute a command: singularity exec rvt.sif <command>
    - To run the default script: singularity run rvt.sif